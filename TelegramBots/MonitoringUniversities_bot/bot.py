import logging
import asyncio
from datetime import datetime
import pytz

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import config
import database
import monitoring
import tasks


NEGATIVE_RESPONSES = {
        'no_k_bal': "‚ùå –í–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª",
        'no_universities': "‚ùå –í–∏ —â–µ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏",
}

RESULT_VIEWS = {
    "with_list": "–í–∏–≤–æ–¥–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É —ñ–∑ —Å–ø–∏—Å–∫–æ–º –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤, \
—è–∫—ñ –º–∞—é—Ç—å –±–∞–ª–∏ –≤–∏—â—ñ –∞–±–æ —Ä—ñ–≤–Ω—ñ –í–∞—à–æ–º—É",
    "without_list": "–í–∏–≤–æ–¥–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É –±–µ–∑ —Å–ø–∏—Å–∫—É –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤, \
—è–∫—ñ –º–∞—é—Ç—å –±–∞–ª–∏ –≤–∏—â—ñ –∞–±–æ —Ä—ñ–≤–Ω—ñ –í–∞—à–æ–º—É" ,
}

API_TOKEN = config.API_TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())


class User_k_bal_State(StatesGroup):
    k_bal = State()


@dp.message_handler(commands=('set_k_bal',))
async def set_k_bal(message: types.Message):
    await message.answer("üèÜ –í–≤–µ–¥—ñ—Ç—å –í–∞—à –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª: ")
    await User_k_bal_State.k_bal.set()


@dp.message_handler(state=User_k_bal_State.k_bal)
async def get_k_bal(message: types.Message, state: FSMContext):
    await state.update_data(k_bal=message.text.strip())
    data = await state.get_data()
    await state.finish()

    response = await database.save_k_bal_to_db(message['from'], data['k_bal'], message['chat'])
    await message.answer(response)


@dp.message_handler(commands=('my_k_bal',))
async def my_k_bal(message: types.Message):
    k_bal = await database.get_k_bal(message['from'])
    if k_bal:
        await message.answer(f"–í–∞—à –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª {k_bal}")
    else:
        await message.answer(NEGATIVE_RESPONSES['no_k_bal'])


class User_universities_State(StatesGroup):
    universities = State()


@dp.message_handler(commands=('set_universities',))
async def set_universities(message: types.Message):
    await message.answer("üñá –í–≤–µ–¥—ñ—Ç—å —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏: ")
    await User_universities_State.universities.set()


@dp.message_handler(state=User_universities_State)
async def get_universities(message: types.Message, state: FSMContext):
    await state.update_data(universities=message.text.strip())
    data = await state.get_data()
    await state.finish()

    universities = data['universities']
    new_uns = []
    for un in universities.split(','):
        new_uns += [un[:-1]] if un[-1] == '/' else [un]
    uns = ','.join(new_uns)

    response = await database.save_universities_to_db(message['from'], uns, message['chat'])
    await message.answer(response)


@dp.message_handler(commands=('my_universities',))
async def my_universities(message: types.Message):
    universities = await database.get_universities(message['from'])
    if universities:
        response = f"–í–∞—à—ñ —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏: \n{universities}"
        await message.answer(response, disable_web_page_preview=True)
    else:
        await message.answer(NEGATIVE_RESPONSES['no_universities'])


@dp.message_handler(commands=('run_monitoring',))
async def run_monitoring(message: types.Message):
    k_bal = await database.get_k_bal(message['from'])
    if not k_bal:
        await message.answer(NEGATIVE_RESPONSES['no_k_bal'])
        return

    universities = await database.get_universities(message['from'])
    if not universities:
        await message.answer(NEGATIVE_RESPONSES['no_universities'])
        return

    for university in universities.split(','):
        try:
            un = await monitoring.process_un(university, k_bal)
            await message.answer(f"\
{un.name}({un.url}): \n–í—Å—å–æ–≥–æ {un.k_higher} \
–∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤ —ñ–∑ {un.k_all} –º–∞—é—Ç—å –∫–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª –≤–∏—â–µ \
–∞–±–æ —Ä—ñ–≤–Ω–∏–π {k_bal}, —Å–µ—Ä–µ–¥ –Ω–∏—Ö: {un.k_kv} —ñ–∑ –∫–≤–æ—Ç–æ—é —Ç–∞ {un.k_k} –Ω–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç",
                            disable_web_page_preview=True)

            result_view = await database.get_result_view(message['from'])
            if result_view == 'with_list':
                await message.answer("\
‚Ññ –ü—Ä–∏–∑–≤—ñ—â–µ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª–∏ | –ü—Ä—ñ–æ—Ä—ñ—Ç–µ—Ç | –ö–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª | –ö–≤–æ—Ç–∞(+/-) | –ë—é–¥–∂–µ—Ç(–ë)/–ö–æ–Ω—Ç—Ä–∞–∫—Ç(–ö)\
")
                result_list = ""
                for index, entrant in enumerate(un.entrants):
                    result_list += f"\
{index + 1}. {entrant.full_name} | {entrant.priority} | {entrant.k_bal} | {entrant.kvota} | {entrant.b_or_k}\n\
"
                    if (index + 1) % 50 == 0:
                        await message.answer(result_list)
                        result_list = ""
                await message.answer(result_list)
        except:
            await message.answer("‚ùå –£–ø—Å... –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫\
                    \n–ú–æ–∂–ª–∏–≤–æ, —É–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏ –≤–≤–µ–¥–µ–Ω—ñ —É –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ")


@dp.message_handler(commands=('change_result_view',))
async def change_result_view(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–Ü–∑ —Å–ø–∏—Å–∫–æ–º –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤", callback_data="btn_with_list"))
    keyboard.add(types.InlineKeyboardButton(text="–ë–µ–∑ —Å–ø–∏—Å–∫—É –∞–±—ñ—Ç—É—Ä—ñ—î–Ω—Ç—ñ–≤", callback_data="btn_without_list"))

    await message.answer("üìù –Ø–∫ –≤–∏–≤–æ–¥–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: ", reply_markup=keyboard)


@dp.callback_query_handler(Text(startswith="btn_"))
async def callbacks_btn(call: types.CallbackQuery):
    result_view = '_'.join(call.data.split('_')[1:])

    result_view = await database.change_result_view(call.from_user, result_view)

    await call.message.edit_text('‚úÖ ' + RESULT_VIEWS[result_view])
    await call.answer()


@dp.message_handler(commands=('my_data',))
async def my_data(message: types.Message):
    id = message['from']['id']

    k_bal = await database.get_k_bal(message['from'])
    k_bal = k_bal if k_bal else NEGATIVE_RESPONSES['no_k_bal']

    universities = await database.get_universities(message['from'])
    universities = universities.split(',') if universities else None

    result_view = await database.get_result_view(message['from'])
    result_view = RESULT_VIEWS[result_view]

    auto_monitoring = await database.get_auto_monitoring(message['from'])

    result_card = f"\
üîë ID: {id}\n\
üèÜ –ö–æ–Ω–∫—É—Ä—Å–Ω–∏–π –±–∞–ª: {k_bal}\n\
üñá –£–Ω—ñ–≤–µ—Ä—Å–∏—Ç–µ—Ç–∏: \
"
    if universities:
        for index in range(len(universities)):
            result_card += f"\n{index + 1}) {universities[index].strip()},"
        result_card = result_card[:-1]
    else:
        result_card += NEGATIVE_RESPONSES['no_universities']

    result_card += f"\nüìù –í–∏–≥–ª—è–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É: \n{result_view}\
\n‚è± –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: " 
    result_card += f"–∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ {auto_monitoring}" if auto_monitoring else "–≤–∏–º–∫–Ω—É—Ç–æ"

    await message.reply(result_card, disable_web_page_preview=True)


class User_auto_monitoring_State(StatesGroup):
    time = State()


@dp.message_handler(commands=('enable_auto_monitoring',))
async def enable_auto_monitoring(message: types.Message):
    k_bal = await database.get_k_bal(message['from'])
    if not k_bal:
        await message.answer(NEGATIVE_RESPONSES['no_k_bal'])
        return

    universities = await database.get_universities(message['from'])
    if not universities:
        await message.answer(NEGATIVE_RESPONSES['no_universities'])
        return

    await message.answer("‚è± –í–≤–µ–¥—ñ—Ç—å —á–∞—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É, \
—É —Ñ–æ—Ä–º–∞—Ç—ñ –≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏")
    await User_auto_monitoring_State.time.set()


@dp.message_handler(state=User_auto_monitoring_State.time)
async def get_auto_monitoring(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text.strip())
    data = await state.get_data()
    await state.finish()

    response = await database.enable_auto_monitoring(message['from'], data['time'])

    await message.answer(response)

@dp.message_handler(commands=('my_auto_monitoring',))
async def my_auto_monitoring(message: types.Message):
    auto_monitoring = await database.get_auto_monitoring(message['from'])

    if auto_monitoring:
        await message.answer(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: –∫–æ–∂–µ–Ω –¥–µ–Ω—å –æ {auto_monitoring}")
    else:
        await message.answer("–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥: –≤–∏–º–∫–Ω—É—Ç–æ")


@dp.message_handler(commands=('disable_auto_monitoring',))
async def disable_auto_monitoring(message: types.Message):
    response = await database.disable_auto_monitoring(message['from'])

    await message.answer(response)


async def scheduled(wait_for):
    TZ = pytz.timezone("Europe/Kiev")
    while True:
        await asyncio.sleep(wait_for)
        time_now = datetime.now(TZ).strftime("%H:%M")
        await tasks.auto_monitoring(bot, time_now.strip())


def run_bot():
    loop = asyncio.get_event_loop()
    loop.create_task(scheduled(60))
    executor.start_polling(dp, skip_updates=True)
